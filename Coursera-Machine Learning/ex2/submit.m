function submit()
  addpath('./lib');

  conf.assignmentKey = 'JvOPouj-S-ys8KjYcPYqrg';
  conf.itemName = 'Logistic Regression';
  conf.partArrays = { ...
    { ...
      'sFxIn', ...
      { 'sigmoid.m' }, ...
      'Sigmoid Function', ...
    }, ...
    { ...
      'yvXBE', ...
      { 'costFunction.m' }, ...
      'Logistic Regression Cost', ...
    }, ...
    { ...
      'HerlY', ...
      { 'costFunction.m' }, ...
      'Logistic Regression Gradient', ...
    }, ...
    { ...
      '9fxV6', ...
      { 'predict.m' }, ...
      'Predict', ...
    }, ...
    { ...
      'OddeL', ...
      { 'costFunctionReg.m' }, ...
      'Regularized Logistic Regression Cost', ...
    }, ...
    { ...
      'aUo3H', ...
      { 'costFunctionReg.m' }, ...
      'Regularized Logistic Regression Gradient', ...
    }, ...
  };
  conf.output = @output;

  submitWithConfiguration(conf);
end

function out = output(partId, auxstring)
  % Random Test Cases
  X = [ones(20,1) (exp(1) * sin(1:1:20))' (exp(0.5) * cos(1:1:20))'];
  y = sin(X(:,1) + X(:,2)) > 0;
  if partId == 'sFxIn'
    out = sprintf('%0.5f ', sigmoid(X));
  elseif partId == 'yvXBE'
    out = sprintf('%0.5f ', costFunction([0.25 0.5 -0.5]', X, y));
  elseif partId == 'HerlY'
    [cost, grad] = costFunction([0.25 0.5 -0.5]', X, y);
    out = sprintf('%0.5f ', grad);
  elseif partId == '9fxV6'
    out = sprintf('%0.5f ', predict([0.25 0.5 -0.5]', X));
  elseif partId == 'OddeL'
    out = sprintf('%0.5f ', costFunctionReg([0.25 0.5 -0.5]', X, y, 0.1));
  elseif partId == 'aUo3H'
    [cost, grad] = costFunctionReg([0.25 0.5 -0.5]', X, y, 0.1);
    out = sprintf('%0.5f ', grad);
  end 
end
